"""
 Binary Tree

 Author: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
 Date: 2023-02-25
"""

def cTree
    oLeft = null
    oRight = null
    nItem = 0

    pInit(pnItem, pnDepth)
        @nItem = pnItem
        @nDepth = pnDepth

        if pnDepth > 0
            let nItem2 = pnItem + pnItem
            pnDepth -= 1
            @oLeft = new cTree(nItem2-1, pnDepth)
            @oRight = new cTree(nItem2, pnDepth)
        end
    end

    fCheck
        if @oLeft == null
            return @nItem        
        end
        return @nItem + @oLeft.fCheck() - @oRight.fCheck()
    end
end

let nMinDepth = 4
let nMaxDepth = 14
let nStretchDepth = nMaxDepth + 1

let nStart = tick()

println("stretch tree of depth " & nStretchDepth & "\t check: " & new cTree(0, nStretchDepth).fCheck())

let oLongLivedTree = new cTree(0, nMaxDepth)

# iterations = 2 ^ nMaxDepth
let nIterations = 1
let nD = 0

while nD < nMaxDepth
    nIterations *= 2
    nD += 1
end

let nDepth = nMinDepth

while nDepth < nStretchDepth
    let nCheck = 0
    let nI = 1
    while nI <= nIterations
        nCheck += new cTree(nI, nDepth).fCheck() + new cTree(-nI, nDepth).fCheck()
        nI += 1
    end

    println("num trees: " & nIterations * 2 & "\t depth: " & nDepth & "\t check: " & nCheck)

    nIterations = int(nIterations / 4)
    nDepth += 2
end

println("long lived tree of depth " & nMaxDepth & "\t check: " & oLongLivedTree.fCheck())

println("elapsed: " & tack(nStart))