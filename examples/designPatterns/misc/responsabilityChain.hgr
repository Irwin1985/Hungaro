"""
 Chain of Responsibility Design Pattern

 Author: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
 Date: 2023-02-27
"""

#-------------------------------------------------#
# Base middleware class
#-------------------------------------------------#
def cMiddleware
    oNext = null

    # Builds chains of middleware objects
    fLink(poFirst, ...paChain)
        let oHead = poFirst

        for each vNextInChain in paChain
            oHead.oNext = vNextInChain
            oHead = vNextInChain
        end
        return poFirst
    end

    # Subclasses will implement this method with concrete checks.
    -fCheck(psEmail, psPassword)

    # Runs check on the next object in chain or ends traversing if we're in
    # last object in chain.
    fCheckNext(psEmail, psPassword)
        if @oNext == null
            return true
        end
        return @oNext.fCheck(psEmail, psPassword)
    end
end

#-------------------------------------------------#
# ConcreteHandler. Checks a user's role
#-------------------------------------------------#
def cRoleCheckMiddleware as cMiddleware
    fCheck(psEmail, psPassword)
        if psEmail == "admin@example.com"
            pPrintLn("Hello, admin!")
            return true
        end
        pPrintLn("Hello, user!")
        return fCheckNext(psEmail, psPassword)        
    end
end

#---------------------------------------------------------------------------#
# ConcreteHandler. Checks whether there are too many failed login requests.
#---------------------------------------------------------------------------#
def cThrottlingMiddleware as cMiddleware
    nRequestPerMinute = 0
    nRequest = 0
    nCurrentTime = 0

    pInit(pnRequestPerMinute)
        @nRequestPerMinute = pnRequestPerMinute
        @nCurrentTime = fSeconds()
    end

    """
        Please, note that fCheckNext() call can be inserted both in the beginning
        of this method and in the end.

        This gives much more flexibility than a simple loop over all middleware
        objects. For instance, an element of a chain ca change the order of
        checks by running its check after all other checks.
    """
    fCheck(psEmail, psPassword)
        if fSeconds() > @nCurrentTime + 60000
            @nRequest = 0
            @nCurrentTime = fSeconds()
        end
        @nRequest += 1
        if @nRequest > @nRequestPerMinute
            pPrintLn("Request limit exceeded!")
            return false
        end
        return fCheckNext(psEmail, psPassword)
    end
end

#---------------------------------------------------------------------------#
# ConcreteHandler. Checks whether a user with the given credentials exists.
#---------------------------------------------------------------------------#
def cUserExistsMiddleware as cMiddleware
    oServer = null
    pInit(poServer)
        @oServer = poServer    
    end

    fCheck(psEmail, psPassword)
        if not @oServer.fHasEmail(psEmail)
            pPrintLn("This email is not registered!")
            return false
        end
        if not @oServer.fIsValidPassword(psEmail, psPassword)
            pPrintLn("Wrong password!")
            return false
        end
        return fCheckNext(psEmail, psPassword)
    end
end

#-------------------------------------------------#
# Server class
#-------------------------------------------------#
def cServer
    mUsers = {}
    oMiddleware = null

    # Client passes a chain of object to server. This improves flexibility and
    # makes testing the server class easier.
    pSetMiddleware(poMiddleware)
        @oMiddleware = poMiddleware
    end

    # Server gets email and password from client and sends the authorization
    # request to the chain.
    fLogin(psEmail, psPassword)
        if @oMiddleware.fCheck(psEmail, psPassword)
            pPrintLn("Authorization have been successful!")
            # Do something useful here for authorized users.
            return true
        end
        return false
    end

    pRegister(psEmail, psPassword)
        @mUsers.put(psEmail, psPassword)
    end

    fHasEmail(psEmail)
        return @mUsers.contains(psEmail)
    end

    fIsValidPassword(psEmail, psPassword)
        return @mUsers.get(psEmail) == psPassword
    end
end

#-------------------------------------------------#
# Client code
#-------------------------------------------------#
def fInit
    let oServer = new cServer()
    oServer.pRegister("admin@example.com", "admin_pass")
    oServer.pRegister("user@example.com", "user_pass")

    # All checks are linked. Client can build various chains using the same
    # components.
    let oMiddleware = new cMiddleware().fLink(
        new cThrottlingMiddleware(2),
        new cUserExistsMiddleware(oServer),
        new cRoleCheckMiddleware()
    )

    # Server gets a chain from client code.
    oServer.pSetMiddleware(oMiddleware)

    return oServer
end

#-------------------------------------------------#
# Main procedure
#-------------------------------------------------#
def pMain
    let oServer = fInit()
    let bSuccess = false

    repeat
        let sEmail = fReadLn("Enter email: ")
        let sPassword = fReadLn("Input password: ")
        bSuccess = oServer.fLogin(sEmail, sPassword)
    until not bSuccess
end

pMain()