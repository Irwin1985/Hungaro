"""
 Builder

 Author: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
 Date: 2023-02-27
"""

# Builder interface defines all possible ways to configure a product.
def cBuilder
    -pSetCarType(poType)
    -pSetSeats(pnSeats)
    -pSetEngine(poEngine)
    -pSetTransmission(psTransmission)
    -pSetTripComputer(poTripComputer)
    -pSetGPSNavigator(poGPSNavigator)
end

# Car Type constants.
let CITY_CAR    = "City Car", 
    SPORTS_CAR  = "Sports Car", 
    SUV         = "SUV"

# Transmission constants.
let SINGLE_SPEED   = "Single Speed", 
    MANUAL         = "Manual", 
    AUTOMATIC      = "Automatic", 
    SEMI_AUTOMATIC = "Semi-Automatic"


# Concrete builders implement steps defined in the common interface.
def cCarBuilder as cBuilder
    sCarType = ""
    nSeats = 0
    oEngine = null
    sTransmission = ""
    oTripComputer = null
    oGPSNavigator = null

    pSetCarType(psType)
        @sCarType = psType
    end

    pSetSeats(pnSeats)
        @nSeats = pnSeats
    end

    pSetEngine(poEngine)
        @oEngine = poEngine
    end

    pSetTransmission(psTransmission)
        @sTransmission = psTransmission
    end

    pSetTripComputer(poTripComputer)
        @oTripComputer = poTripComputer
    end

    pSetGPSNavigator(poGPSNavigator)
        @oGPSNavigator = poGPSNavigator
    end

    fGetResult
        return new cCar(@sCarType, @nSeats, @oEngine, @sTransmission, @oTripComputer, @oGPSNavigator)
    end
end

"""
    Unlike other creational patterns, Builder can construct unrelated products,
    which don't have the common interface.

    In this case we build a user manual for a car, using the same steps as we
    built a car. This allows to produce manuals for specific car models,
    configured with different features.
"""

def cCarManualBuilder as cBuilder
    sCarType = ""
    nSeats = 0
    oEngine = null
    sTransmission = ""
    oTripComputer = null
    oGPSNavigator = null

    pSetCarType(psType)
        @sCarType = psType
    end

    pSetSeats(pnSeats)
        @nSeats = pnSeats
    end

    pSetEngine(poEngine)
        @oEngine = poEngine
    end

    pSetTransmission(psTransmission)
        @sTransmission = psTransmission
    end

    pSetTripComputer(poTripComputer)
        @oTripComputer = poTripComputer
    end

    pSetGPSNavigator(poGPSNavigator)
        @oGPSNavigator = poGPSNavigator
    end

    fGetResult
        return new cManual(@sCarType, @nSeats, @oEngine, @sTransmission, @oTripComputer, @oGPSNavigator)
    end
end

# Car is a product class.
def cCar
    sCarType = ""
    nSeats = 0
    oEngine = null
    sTransmission = ""
    oTripComputer = null
    oGPSNavigator = null
    nFuel = 0

    pInit(psCarType, pnSeats, poEngine, psTransmission, poTripComputer, poGPSNavigator)
        @sCarType = psCarType
        @nSeats = pnSeats
        @oEngine = poEngine
        @sTransmission = psTransmission
        @oTripComputer = poTripComputer
        if @oTripComputer != null
            @oTripComputer.pSetCar(poThis)
        end
        @oGPSNavigator = poGPSNavigator
    end

    fGetCarType
        return @sCarType
    end

    fGetFuel
        return @nFuel
    end

    pSetFuel(pnFuel)
        @nFuel = pnFuel
    end

    fGetSeats
        return @nSeats
    end

    fGetEngine
        return @oEngine
    end

    fGetTransmission
        return @sTransmission
    end

    fGetTripComputer
        return @oTripComputer
    end

    fGetGPSNavigator
        return @oGPSNavigator
    end
end

# Car manual is another product. Note that is does not have the same ancestor
# as a Car. They are not related by inheritance.

def cManual
    sCarType = ""
    nSeats = 0
    oEngine = null
    sTransmission = ""
    oTripComputer = null
    oGPSNavigator = null

    pInit(psCarType, pnSeats, poEngine, psTransmission, poTripComputer, poGPSNavigator)
        @sCarType = psCarType
        @nSeats = pnSeats
        @oEngine = poEngine
        @sTransmission = psTransmission
        @oTripComputer = poTripComputer
        @oGPSNavigator = poGPSNavigator
    end

    fPrint        
        let sInfo = ""
        sInfo &= "Type of car: " & @sCarType & "\n"
        sInfo &= "Count of seats: " & @nSeats & "\n"
        sInfo &= "Engine: volume - " & @oEngine.fGetVolume() & "; mileage - " & @oEngine.fGetMileage() & "\n"
        sInfo &= "Transmission: " & @sTransmission & "\n"
        if @oTripComputer != null
            sInfo &= "Trip Computer: Functional" & "\n"
        else
            sInfo &= "Trip Computer: N/A" & "\n"
        end
        if @oGPSNavigator != null
            sInfo &= "GPS Navigator: Functional" & "\n"
        else
            sInfo &= "GPS Navigator: N/A" & "\n"
        end
        return sInfo
    end
end

# Engine: Just another feature of a car.
def cEngine
    nVolume = 0
    nMileage = 0
    bStarted = false

    pInit(pnVolume, pnMileage)
        @nVolume = pnVolume
        @nMileage = pnMileage
    end

    pOn
        @bStarted = true
    end

    pOff
        @bStarted = false
    end

    fIsStarted
        return @bStarted
    end

    pGo(pnMileage)
        if @bStarted
            @nMileage += pnMileage
        else
            pPrintLn("Cannot go(), you must start engine first!")
        end
    end     

    fGetVolume
        return @nVolume
    end

    fGetMileage
        return @nMileage
    end
end

# GPSNavigator: just another feature of a car.
def cGPSNavigator
    sRoute = "221b, Baker Street, London  to Scotland Yard, 8-10 Broadway, London"

    pInit(psManualRoute)
        if psManualRoute.len() > 0
            @sRoute = psManualRoute        
        end
    end

    fGetRoute
        return @sRoute
    end
end

# TripComputer: another feature of a car.
def cTripComputer
    oCar = null

    pSetCar(poCar)
        @oCar = poCar
    end

    pShowFuelLevel
        pPrintLn("Fuel level: " & @oCar.fGetFuel())
    end

    pShowStatus
        if @oCar.fGetEngine().fIsStarted()
            pPrintLn("Car is started")
        else
            pPrintLn("Car isn\'t started")
        end
    end
end

"""
    Director defines the order of building steps. It works with a builder object
    through the common interface. Therefore, it may not know what product is
    being built.
"""
def cDirector
    pConstructSportsCar(poBuilder)
        poBuilder.pSetCarType(SPORTS_CAR)
        poBuilder.pSetSeats(2)
        poBuilder.pSetEngine(new cEngine(3.0, 0))
        poBuilder.pSetTransmission(SEMI_AUTOMATIC)
        poBuilder.pSetTripComputer(new cTripComputer())
        poBuilder.pSetGPSNavigator(new cGPSNavigator(""))
    end

    pConstructCityCar(poBuilder)
        poBuilder.pSetCarType(CITY_CAR)
        poBuilder.pSetSeats(2)
        poBuilder.pSetEngine(new cEngine(1.2, 0))
        poBuilder.pSetTransmission(AUTOMATIC)
        poBuilder.pSetTripComputer(new cTripComputer())
        poBuilder.pSetGPSNavigator(new cGPSNavigator(""))
    end

    pConstructSUV(poBuilder)
        poBuilder.pSetCarType(SUV)
        poBuilder.pSetSeats(4)
        poBuilder.pSetEngine(new cEngine(2.5, 0))
        poBuilder.pSetTransmission(MANUAL)
        poBuilder.pSetTripComputer(new cTripComputer())
        poBuilder.pSetGPSNavigator(new cGPSNavigator(""))
    end
end

# Demo procedure. Everything comes together here.
def pDemo
    let oDirector = new cDirector()
    """
        Director gets the concrete builder object from the client
        (application code). That's because application knows better which
        builder to use to get a specific product.
    """
    let oBuilder = new cCarBuilder()
    oDirector.pConstructSportsCar(oBuilder)

    """
        The final product is often retrieved from a builder object, since
        Director is not aware and not dependent on concrete builders and
        products.
    """
    let oCar = oBuilder.fGetResult()
    pPrintLn("Car built:\n" & oCar.fGetCarType())

    let oManualBuilder = new cCarManualBuilder()

    # Director may know several building recipes.
    oDirector.pConstructSportsCar(oManualBuilder)
    let oCarManual = oManualBuilder.fGetResult()    
    
    pPrintLn("Car manual built:\n" & oCarManual.fPrint())    
end

pDemo()