"""
 Builder

 Author: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
 Date: 2023-02-27
"""

# Builder interface defines all possible ways to configure a product.
def cBuilder
    -pSetCarType(poType)
    -pSetSeats(pnSeats)
    -pSetEngine(poEngine)
    -pSetTransmission(psTransmission)
    -pSetTripComputer(poTripComputer)
    -pSetGPSNavigator(poGPSNavigator)
end

# Car Type constants.
let CITY_CAR    = "City Car", 
    SPORTS_CAR  = "Sports Car", 
    SUV         = "SUV"

# Transmission constants.
let SINGLE_SPEED   = "Single Speed", 
    MANUAL         = "Manual", 
    AUTOMATIC      = "Automatic", 
    SEMI_AUTOMATIC = "Semi-Automatic"


# Concrete builders implement steps defined in the common interface.
def cCarBuilder as cBuilder
    sCarType = ""
    nSeats = 0
    oEngine = null
    sTransmission = ""
    oTripComputer = null
    oGPSNavigator = null

    pSetCarType(psType)
        poThis.sCarType = psType
    end

    pSetSeats(pnSeats)
        poThis.nSeats = pnSeats
    end

    pSetEngine(poEngine)
        poThis.oEngine = poEngine
    end

    pSetTransmission(psTransmission)
        poThis.sTransmission = psTransmission
    end

    pSetTripComputer(poTripComputer)
        poThis.oTripComputer = poTripComputer
    end

    pSetGPSNavigator(poGPSNavigator)
        poThis.oGPSNavigator = poGPSNavigator
    end

    fGetResult
        return new cCar(poThis.sCarType, poThis.nSeats, poThis.oEngine, poThis.sTransmission, poThis.oTripComputer, poThis.oGPSNavigator)
    end
end

"""
    Unlike other creational patterns, Builder can construct unrelated products,
    which don't have the common interface.

    In this case we build a user manual for a car, using the same steps as we
    built a car. This allows to produce manuals for specific car models,
    configured with different features.
"""

def cCarManualBuilder as cBuilder
    sCarType = ""
    nSeats = 0
    oEngine = null
    sTransmission = ""
    oTripComputer = null
    oGPSNavigator = null

    pSetCarType(psType)
        poThis.sCarType = psType
    end

    pSetSeats(pnSeats)
        poThis.nSeats = pnSeats
    end

    pSetEngine(poEngine)
        poThis.oEngine = poEngine
    end

    pSetTransmission(psTransmission)
        poThis.sTransmission = psTransmission
    end

    pSetTripComputer(poTripComputer)
        poThis.oTripComputer = poTripComputer
    end

    pSetGPSNavigator(poGPSNavigator)
        poThis.oGPSNavigator = poGPSNavigator
    end

    fGetResult
        return new cManual(poThis.sCarType, poThis.nSeats, poThis.oEngine, poThis.sTransmission, poThis.oTripComputer, poThis.oGPSNavigator)
    end
end

# Car is a product class.
def cCar
    sCarType = ""
    nSeats = 0
    oEngine = null
    sTransmission = ""
    oTripComputer = null
    oGPSNavigator = null
    nFuel = 0

    pInit(psCarType, pnSeats, poEngine, psTransmission, poTripComputer, poGPSNavigator)
        poThis.sCarType = psCarType
        poThis.nSeats = pnSeats
        poThis.oEngine = poEngine
        poThis.sTransmission = psTransmission
        poThis.oTripComputer = poTripComputer
        if poThis.oTripComputer != null
            poThis.oTripComputer.pSetCar(poThis)
        end
        poThis.oGPSNavigator = poGPSNavigator
    end

    fGetCarType
        return poThis.sCarType
    end

    fGetFuel
        return poThis.nFuel
    end

    pSetFuel(pnFuel)
        poThis.nFuel = pnFuel
    end

    fGetSeats
        return poThis.nSeats
    end

    fGetEngine
        return poThis.oEngine
    end

    fGetTransmission
        return poThis.sTransmission
    end

    fGetTripComputer
        return poThis.oTripComputer
    end

    fGetGPSNavigator
        return poThis.oGPSNavigator
    end
end

# Car manual is another product. Note that is does not have the same ancestor
# as a Car. They are not related by inheritance.

def cManual
    sCarType = ""
    nSeats = 0
    oEngine = null
    sTransmission = ""
    oTripComputer = null
    oGPSNavigator = null

    pInit(psCarType, pnSeats, poEngine, psTransmission, poTripComputer, poGPSNavigator)
        poThis.sCarType = psCarType
        poThis.nSeats = pnSeats
        poThis.oEngine = poEngine
        poThis.sTransmission = psTransmission
        poThis.oTripComputer = poTripComputer
        poThis.oGPSNavigator = poGPSNavigator
    end

    fPrint        
        let sInfo = ""
        sInfo &= "Type of car: " & poThis.sCarType & "\n"
        sInfo &= "Count of seats: " & poThis.nSeats & "\n"
        sInfo &= "Engine: volume - " & poThis.oEngine.fGetVolume() & "; mileage - " & poThis.oEngine.fGetMileage() & "\n"
        sInfo &= "Transmission: " & poThis.sTransmission & "\n"
        if poThis.oTripComputer != null
            sInfo &= "Trip Computer: Functional" & "\n"
        else
            sInfo &= "Trip Computer: N/A" & "\n"
        end
        if poThis.oGPSNavigator != null
            sInfo &= "GPS Navigator: Functional" & "\n"
        else
            sInfo &= "GPS Navigator: N/A" & "\n"
        end
        return sInfo
    end
end

# Engine: Just another feature of a car.
def cEngine
    nVolume = 0
    nMileage = 0
    bStarted = false

    pInit(pnVolume, pnMileage)
        poThis.nVolume = pnVolume
        poThis.nMileage = pnMileage
    end

    pOn
        poThis.bStarted = true
    end

    pOff
        poThis.bStarted = false
    end

    fIsStarted
        return poThis.bStarted
    end

    pGo(pnMileage)
        if poThis.bStarted
            poThis.nMileage += pnMileage
        else
            println("Cannot go(), you must start engine first!")
        end
    end     

    fGetVolume
        return poThis.nVolume
    end

    fGetMileage
        return poThis.nMileage
    end
end

# GPSNavigator: just another feature of a car.
def cGPSNavigator
    sRoute = "221b, Baker Street, London  to Scotland Yard, 8-10 Broadway, London"

    pInit(psManualRoute)
        if psManualRoute.len() > 0
            poThis.sRoute = psManualRoute        
        end
    end

    fGetRoute
        return poThis.sRoute
    end
end

# TripComputer: another feature of a car.
def cTripComputer
    oCar = null

    pSetCar(poCar)
        poThis.oCar = poCar
    end

    pShowFuelLevel
        println("Fuel level: " & poThis.oCar.fGetFuel())
    end

    pShowStatus
        if poThis.oCar.fGetEngine().fIsStarted()
            println("Car is started")
        else
            println("Car isn\'t started")
        end
    end
end

"""
    Director defines the order of building steps. It works with a builder object
    through the common interface. Therefore, it may not know what product is
    being built.
"""
def cDirector
    pConstructSportsCar(poBuilder)
        poBuilder.pSetCarType(SPORTS_CAR)
        poBuilder.pSetSeats(2)
        poBuilder.pSetEngine(new cEngine(3.0, 0))
        poBuilder.pSetTransmission(SEMI_AUTOMATIC)
        poBuilder.pSetTripComputer(new cTripComputer())
        poBuilder.pSetGPSNavigator(new cGPSNavigator(""))
    end

    pConstructCityCar(poBuilder)
        poBuilder.pSetCarType(CITY_CAR)
        poBuilder.pSetSeats(2)
        poBuilder.pSetEngine(new cEngine(1.2, 0))
        poBuilder.pSetTransmission(AUTOMATIC)
        poBuilder.pSetTripComputer(new cTripComputer())
        poBuilder.pSetGPSNavigator(new cGPSNavigator(""))
    end

    pConstructSUV(poBuilder)
        poBuilder.pSetCarType(SUV)
        poBuilder.pSetSeats(4)
        poBuilder.pSetEngine(new cEngine(2.5, 0))
        poBuilder.pSetTransmission(MANUAL)
        poBuilder.pSetTripComputer(new cTripComputer())
        poBuilder.pSetGPSNavigator(new cGPSNavigator(""))
    end
end

# Demo procedure. Everything comes together here.
def pDemo
    let oDirector = new cDirector()
    """
        Director gets the concrete builder object from the client
        (application code). That's because application knows better which
        builder to use to get a specific product.
    """
    let oBuilder = new cCarBuilder()
    oDirector.pConstructSportsCar(oBuilder)

    """
        The final product is often retrieved from a builder object, since
        Director is not aware and not dependent on concrete builders and
        products.
    """
    let oCar = oBuilder.fGetResult()
    println("Car built:\n" & oCar.fGetCarType())

    let oManualBuilder = new cCarManualBuilder()

    # Director may know several building recipes.
    oDirector.pConstructSportsCar(oManualBuilder)
    let oCarManual = oManualBuilder.fGetResult()    
    
    println("Car manual built:\n" & oCarManual.fPrint())    
end

pDemo()