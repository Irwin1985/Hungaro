"""
 Bridge

 Author: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
 Date: 2023-02-27
"""

# Devices
def cDevice
    -fIsEnabled()
    -pEnable()
    -pDisable()    
    -fGetVolume()
    -pSetVolume(pnPercent)        
    -fGetChannel()    
    -pSetChannel(pnChannel)
    -pPrintStatus()
end

# Radio
def cRadio as cDevice
    bOn = false
    nVolume = 30
    nChannel = 1

    fIsEnabled
        return @bOn
    end
    
    pEnable
        @bOn = true    
    end
    
    pDisable
        @bOn = false
    end    
    
    fGetVolume
        return @nVolume
    end    
    
    pSetVolume(pnPercent)
        if @nVolume > 100
            @nVolume = 100
        end
        if @nVolume < 0
            @nVolume = 0
        else
            @nVolume = pnPercent
        end
    end
        
    fGetChannel
        return @nChannel
    end
    
    
    pSetChannel(pnChannel)
        @nChannel = pnChannel
    end    

    pPrintStatus
        pPrintLn("------------------------------------")
        pPrintLn("| I\'m radio.")
        pPrintLn("| I\'m " & iif(@bOn, "enabled", "disabled"))
        pPrintLn("| Current volume is " & @nVolume & "%")
        pPrintLn("| Current channel is " & @nChannel)
        pPrintLn("------------------------------------\n")
    end
end

# TV
def cTV as cDevice
    bOn = false
    nVolume = 30
    nChannel = 1

    fIsEnabled
        return @bOn
    end
    
    pEnable
        @bOn = true    
    end
    
    pDisable
        @bOn = false
    end    
    
    fGetVolume
        return @nVolume
    end    
    
    pSetVolume(pnPercent)
        if @nVolume > 100
            @nVolume = 100
        end
        if @nVolume < 0
            @nVolume = 0
        else
            @nVolume = pnPercent
        end
    end
        
    fGetChannel
        return @nChannel
    end
    
    
    pSetChannel(pnChannel)
        @nChannel = pnChannel
    end    

    pPrintStatus
        pPrintLn("------------------------------------")
        pPrintLn("| I\'m TV set.")
        pPrintLn("| I\'m " & iif(@bOn, "enabled", "disabled"))
        pPrintLn("| Current volume is " & @nVolume & "%")
        pPrintLn("| Current channel is " & @nChannel)
        pPrintLn("------------------------------------\n")
    end
end

# Remote
def cRemote
    -pPower()    
    -pVolumeDown()
    -pVolumeUp()    
    -pChannelDown()
    -pChannelUp()
end

# Basic remote
def cBasicRemote as cRemote
    oDevice = null

    pInit(poDevice)
        @oDevice = poDevice
    end

    pPower
        pPrintLn("Remote: power toggle")
        if @oDevice.fIsEnabled()
            @oDevice.pDisable()
        else
            @oDevice.pEnable()
        end
    end
    
    pVolumeDown
        pPrintLn("Remote: volume down")
        @oDevice.pSetVolume(@oDevice.fGetVolume() - 10)
    end
    
    pVolumeUp
        pPrintLn("Remote: volume up")
        @oDevice.pSetVolume(@oDevice.fGetVolume() + 10)
    end
    
    pChannelDown
        pPrintLn("Remote: channel down")
        @oDevice.pSetChannel(@oDevice.fGetChannel() - 1)
    end

    pChannelUp
        pPrintLn("Remote: channel up")
        @oDevice.pSetChannel(@oDevice.fGetChannel() + 1)
    end
end

# Advanced remote
def cAdvancedRemote as cBasicRemote
    pInit(poDevice)
        super(poDevice)
    end

    pMute
        pPrintLn("Remote: mute")
        @oDevice.pSetVolume(0)
    end
end

# Main
def pTestDevice(poDevice)
    pPrintLn("Tests with basic remote.")
    let oBasicRemote = new cBasicRemote(poDevice)
    oBasicRemote.pPower()
    poDevice.pPrintStatus()

    pPrintLn("Tests with advanced remote.")
    let oAdvancedRemote = new cAdvancedRemote(poDevice)
    oAdvancedRemote.pPower()
    oAdvancedRemote.pMute()
    poDevice.pPrintStatus()
end

# Remote
def pMain
    pTestDevice(new cTV())
    pTestDevice(new cRadio())
end

pMain()

# final assert to automatically check if all tests passed
pAssert(true, "This test should always pass")