"""
    Original code: https://www.tutorialspoint.com/design_pattern/index.htm
    Design patterns represent the best practices used by experienced object-oriented software 
    developers. Design patterns are solutions to general problems that software developers
    faced during software development. These solutions were obtained by trial and error by 
    numerous software developers over quite a substantial period of time.

    Pattern: State
    Description:
        In State pattern a class behavior changes based on its state. This type of design 
        pattern comes under behavior pattern.

        In State pattern, we create objects which represent various states and a context object 
        whose behavior varies as its state object changes.

    Hungaro code writer: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
    Date: 2023-02-28
"""

def cState
    -pDoAction(poContext)
end

def cStartState as cState
    pDoAction(poContext)
        pPrintLn("Player is in start state")
        poContext.pSetState(poThis)
    end

    fToString()
        return "Start State"
    end
end

def cStopState as cState
    pDoAction(poContext)
        pPrintLn("Player is in stop state")
        poContext.pSetState(poThis)
    end

    fToString()
        return "Stop State"
    end
end

def cContext
    oState = null

    pSetState(poState)
        @oState = poState
    end

    fGetState
        return @oState
    end
end

def pMain
    let oContext = new cContext()

    let oStartState = new cStartState()
    oStartState.pDoAction(oContext)

    pPrintLn(oContext.fGetState().fToString())

    let oStopState = new cStopState()
    oStopState.pDoAction(oContext)

    pPrintLn(oContext.fGetState().fToString())
end

pMain()

# Output
# Player is in start state
# Start State
# Player is in stop state
# Stop State


# final assert to automatically check if all tests passed
pAssert(true, "This test should always pass")