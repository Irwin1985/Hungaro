"""
    Original code: https://www.tutorialspoint.com/design_pattern/index.htm
    Design patterns represent the best practices used by experienced object-oriented software 
    developers. Design patterns are solutions to general problems that software developers
    faced during software development. These solutions were obtained by trial and error by 
    numerous software developers over quite a substantial period of time.

    Pattern: Mediator
    Description:
        Mediator pattern is used to reduce communication complexity between multiple 
        objects or classes. This pattern provides a mediator class which normally handles 
        all the communications between different classes and supports easy maintenance of 
        the code by loose coupling. Mediator pattern falls under behavioral pattern category.

    Hungaro code writer: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
    Date: 2023-02-28
"""

def cChatRoom
    pShowMessage(poUser, psMessage)
        pPrintLn("date: " & fDate() & " [" & poUser.fGetName() & "]: " & psMessage)
    end
end

let goChatRoom = new cChatRoom()

def cUser
    sName = ""

    pInit(psName)
        @sName = psName
    end

    fGetName
        return @sName
    end

    pSetName(psName)
        @sName = psName
    end

    pSendMessage(psMessage)
        goChatRoom.pShowMessage(poThis, psMessage)
    end
end

def pMain
    let oRobert = new cUser("Robert")
    let oJohn = new cUser("John")

    oRobert.pSendMessage("Hi! John!")
    oJohn.pSendMessage("Hello! Robert!")
end

pMain()

# Output
# 2023-02-28 [Robert]: Hi! John!
# 2023-02-28 [John]: Hello! Robert!