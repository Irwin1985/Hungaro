"""
    Original code: https://www.tutorialspoint.com/design_pattern/index.htm
    Design patterns represent the best practices used by experienced object-oriented software 
    developers. Design patterns are solutions to general problems that software developers
    faced during software development. These solutions were obtained by trial and error by 
    numerous software developers over quite a substantial period of time.

    Pattern: Facade
    Description:
        Facade pattern hides the complexities of the system and provides an interface to 
        the client using which the client can access the system. This type of design pattern 
        comes under structural pattern as this pattern adds an interface to existing 
        system to hide its complexities.

    Hungaro code writer: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
    Date: 2023-02-28
"""

def cShape
    -pDraw()
end

def cRectangle as cShape
    pDraw
        pPrintLn("Rectangle::draw()")
    end
end

def cSquare as cShape
    pDraw
        pPrintLn("Square::draw()")
    end
end

def cCircle as cShape
    pDraw
        pPrintLn("Circle::draw()")
    end
end

def cShapeMaker
    oCircle = null
    oRectangle = null
    oSquare = null

    pInit
        @oCircle = new cCircle()
        @oRectangle = new cRectangle()
        @oSquare = new cSquare()
    end

    pDrawCircle
        @oCircle.pDraw()
    end

    pDrawRectangle
        @oRectangle.pDraw()
    end

    pDrawSquare
        @oSquare.pDraw()
    end
end

def pMain
    let oShapeMaker = new cShapeMaker()

    oShapeMaker.pDrawCircle()
    oShapeMaker.pDrawRectangle()
    oShapeMaker.pDrawSquare()
end

pMain()

# Output
# Circle::draw()
# Rectangle::draw()
# Square::draw()
