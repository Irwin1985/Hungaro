"""
    Original code: https://www.tutorialspoint.com/design_pattern/index.htm
    Design patterns represent the best practices used by experienced object-oriented software 
    developers. Design patterns are solutions to general problems that software developers
    faced during software development. These solutions were obtained by trial and error by 
    numerous software developers over quite a substantial period of time.

    Pattern: Prototype
    Description:
        Prototype pattern refers to creating duplicate object while keeping performance in 
        mind. This type of design pattern comes under creational pattern as this pattern 
        provides one of the best ways to create an object.

        This pattern involves implementing a prototype interface which tells to create 
        a clone of the current object. This pattern is used when creation of object directly 
        is costly. For example, an object is to be created after a costly database operation. 
        We can cache the object, returns its clone on next request and update the database 
        as and when needed thus reducing database calls.
    
    Hungaro code writer: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
    Date: 2023-02-28
"""

def cShape
    sID = ""
    sType = ""

    -pDraw()

    fGetType
        return poThis.sType
    end

    fGetID
        return poThis.sID
    end

    pSetID(psID)
        poThis.sID = psID
    end

    fClone
        let oClone = null
        try
            oClone = new cShape()
            oClone.sID = poThis.sID
            oClone.sType = poThis.sType            
        catch
            println("CATCH ERROR: " & oEx.message)
        end
        return oClone
    end
end

def cRectangle as cShape
    pInit
        poThis.sType = "Rectangle"
    end

    pDraw
        println("Inside Rectangle::draw() method.")
    end
end

def cSquare as cShape
    pInit
        poThis.sType = "Square"
    end

    pDraw
        println("Inside Square::draw() method.")
    end
end

def cCircle as cShape
    pInit
        poThis.sType = "Circle"
    end

    pDraw
        println("Inside Circle::draw() method.")
    end
end

def cShapeCache
    mShapeMap = {}
    
    fGetShape(psShapeId)
        let oCachedShape = poThis.mShapeMap[psShapeId]
        return oCachedShape.fClone()
    end

    pLoadCache
        let oCircle = new cCircle()
        oCircle.pSetID("1")
        poThis.mShapeMap[oCircle.fGetID()] = oCircle

        let oSquare = new cSquare()
        oSquare.pSetID("2")
        poThis.mShapeMap[oSquare.fGetID()] = oSquare

        let oRectangle = new cRectangle()
        oRectangle.pSetID("3")
        poThis.mShapeMap[oRectangle.fGetID()] = oRectangle
    end
end

def pMain
    let oShapeCache = new cShapeCache()
    oShapeCache.pLoadCache()

    let oClonedShape1 = oShapeCache.fGetShape("1")
    println("Shape : " & oClonedShape1.fGetType())

    let oClonedShape2 = oShapeCache.fGetShape("2")
    println("Shape : " & oClonedShape2.fGetType())

    let oClonedShape3 = oShapeCache.fGetShape("3")
    println("Shape : " & oClonedShape3.fGetType())
end

pMain()

# Output
# Shape : Circle
# Shape : Square
# Shape : Rectangle
