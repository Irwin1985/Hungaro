"""
    Original code: https://www.tutorialspoint.com/design_pattern/index.htm
    Design patterns represent the best practices used by experienced object-oriented software 
    developers. Design patterns are solutions to general problems that software developers
    faced during software development. These solutions were obtained by trial and error by 
    numerous software developers over quite a substantial period of time.

    Pattern: MVC (Model-View-Controller)
    Description:
        Model - Model represents an object or JAVA POJO carrying data. It can also have logic 
                to update controller if its data changes.

        View - View represents the visualization of the data that model contains.

        Controller - Controller acts on both model and view. It controls the data flow into 
                     model object and updates the view whenever data changes. It keeps view 
                     and model separate.

    Hungaro code writer: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
    Date: 2023-02-28
"""

declare lcStudent
    sRollNo = ""
    sName = ""

    fGetRollNo
        return sRollNo
    end

    pSetRollNo(psRollNo)
        sRollNo = psRollNo
    end

    fGetName
        return sName
    end

    pSetName(psName)
        sName = psName
    end
end

declare lcStudentView
    pPrintStudentDetails(psStudentName, psStudentRollNo)
        println("Student: ")
        println("Name: " & psStudentName)
        println("Roll No: " & psStudentRollNo)
    end
end

declare lcStudentController
    oModel = null
    oView = null

    pInit(poModel, poView)
        oModel = poModel
        oView = poView
    end

    pSetStudentName(psName)
        oModel.pSetName(psName)
    end

    fGetStudentName
        return oModel.fGetName()
    end

    pSetStudentRollNo(psRollNo)
        oModel.pSetRollNo(psRollNo)
    end

    fGetStudentRollNo
        return oModel.fGetRollNo()
    end

    pUpdateView
        oView.pPrintStudentDetails(oModel.fGetName(), oModel.fGetRollNo())
    end
end

declare lpMain
    declare lfRetrieveStudentFromDatabase
        declare loStudent = new lcStudent()
        loStudent.pSetName("Robert")
        loStudent.pSetRollNo("10")
        return loStudent
    end

    declare loStudent = lfRetrieveStudentFromDatabase()
    declare loView = new lcStudentView()
    declare loController = new lcStudentController(loStudent, loView)

    loController.pUpdateView()

    loController.pSetStudentName("John")

    loController.pUpdateView()
end

lpMain()

# Output
# Student:
# Name: Robert
# Roll No: 10
# Student:
# Name: John
# Roll No: 10
