"""
    Original code: https://www.tutorialspoint.com/design_pattern/index.htm
    Design patterns represent the best practices used by experienced object-oriented software 
    developers. Design patterns are solutions to general problems that software developers
    faced during software development. These solutions were obtained by trial and error by 
    numerous software developers over quite a substantial period of time.

    Pattern: Service Locator
    Description:
        The service locator design pattern is used when we want to locate various services using 
        JNDI lookup. Considering high cost of looking up JNDI for a service, Service Locator pattern 
        makes use of caching technique. For the first time a service is required, Service Locator 
        looks up in JNDI and caches the service object. Further lookup or same service via Service 
        Locator is done in its cache which improves the performance of application to great extent. 
        Following are the entities of this type of design pattern.

    Hungaro code writer: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
    Date: 2023-03-01
"""

def cService
    -fGetName()
    -pExecute()    
end

def cService1 as cService
    pExecute
        pPrintLn("Executing Service1")
    end

    fGetName
        return "Service1"
    end
end

def cService2 as cService
    pExecute
        pPrintLn("Executing Service2")
    end

    fGetName
        return "Service2"
    end
end

def cInitialContext
    fLookup(psJndiName)
        if psJndiName == "SERVICE1"
            pPrintLn("Looking up and creating a new Service1 object")
            return new cService1()
        end
        if psJndiName == "SERVICE2"
            pPrintLn("Looking up and creating a new Service2 object")
            return new cService2()
        end
        return null
    end
end

def cCache
    aServices = []

    fGetService(psServiceName)
        for each vService in @aServices
            if vService.fGetName() == psServiceName
                pPrintLn("Returning cached  " & psServiceName & " object")
                return vService
            end
        end
        return null
    end

    pAddService(poNewService)
        let bExists = false
        
        for each vService in @aServices
            if vService.fGetName() == poNewService.fGetName()
                bExists = true
            end
        end
        if not bExists            
            @aServices.pPush(poNewService)
        end
    end
end

def cServiceLocator
    oCache = new cCache()
    
    fGetService(psJndiName)
        let oService = @oCache.fGetService(psJndiName)
        if oService != null
            return oService
        end

        let oInitialContext = new cInitialContext()
        let oService1 = oInitialContext.fLookup(psJndiName)
        @oCache.pAddService(oService1)
        return oService1
    end
end

def pMain
    let oServiceLocator = new cServiceLocator()

    let oService = oServiceLocator.fGetService("SERVICE1")
    oService.pExecute()

    oService = oServiceLocator.fGetService("SERVICE2")
    oService.pExecute()

    oService = oServiceLocator.fGetService("SERVICE1")
    oService.pExecute()

    oService = oServiceLocator.fGetService("SERVICE2")
    oService.pExecute()
end

pMain()

# Output
# Looking up and creating a new Service1 object
# Executing Service1
# Looking up and creating a new Service2 object
# Executing Service2
# Returning cached  Service1 object
# Executing Service1
# Returning cached  Service2 object
# Executing Service2


# final assert to automatically check if all tests passed
pAssert(true, "This test should always pass")