"""
    Original code: https://www.tutorialspoint.com/design_pattern/index.htm
    Design patterns represent the best practices used by experienced object-oriented software 
    developers. Design patterns are solutions to general problems that software developers
    faced during software development. These solutions were obtained by trial and error by 
    numerous software developers over quite a substantial period of time.

    Pattern: Filter
    Description:
        Filter pattern or Criteria pattern is a design pattern that enables developers to filter a 
        set of objects using different criteria and chaining them in a decoupled way through logical 
        operations. This type of design pattern comes under structural pattern as this pattern 
        combines multiple criteria to obtain single criteria.

    Hungaro code writer: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
    Date: 2023-02-28
"""

def cPerson
    sName = ""
    sGender = ""
    sMaritalStatus = ""

    pInit(psName, psGender, psMaritalStatus)
        @sName = psName
        @sGender = psGender
        @sMaritalStatus = psMaritalStatus
    end

    fGetName
        return @sName
    end

    fGetGender
        return @sGender
    end

    fGetMaritalStatus
        return @sMaritalStatus
    end
end

def cCriteria
    fMeetCriteria(paPersons)
        return paPersons
    end
end

def cCriteriaMale as cCriteria
    fMeetCriteria(paPersons)
        let aMalePersons = []
        for each vPerson in paPersons
            if vPerson.fGetGender() == "MALE"
                aMalePersons.pPush(vPerson)
            end
        end

        return aMalePersons
    end
end

def cCriteriaFemale as cCriteria
    fMeetCriteria(paPersons)
        let aFemalePersons = []
        for each vPerson in paPersons
            if vPerson.fGetGender() == "FEMALE"
                aFemalePersons.pPush(vPerson)
            end
        end

        return aFemalePersons
    end
end

def cCriteriaSingle as cCriteria
    fMeetCriteria(paPersons)
        let aSinglePersons = []
        for each vPerson in paPersons
            if vPerson.fGetMaritalStatus() == "SINGLE"
                aSinglePersons.pPush(vPerson)
            end
        end

        return aSinglePersons
    end
end

def cAndCriteria as cCriteria
    oCriteria = null
    oOtherCriteria = null
    
    pInit(poCriteria, poOtherCriteria)
        @oCriteria = poCriteria
        @oOtherCriteria = poOtherCriteria
    end

    fMeetCriteria(paPersons)
        let aFirstCriteriaPersons = @oCriteria.fMeetCriteria(paPersons)
        return @oOtherCriteria.fMeetCriteria(aFirstCriteriaPersons)
    end
end

def cOrCriteria as cCriteria
    oCriteria = null
    oOtherCriteria = null
    
    pInit(poCriteria, poOtherCriteria)
        @oCriteria = poCriteria
        @oOtherCriteria = poOtherCriteria
    end

    fMeetCriteria(paPersons)
        let aFirstCriteriaItems = @oCriteria.fMeetCriteria(paPersons)
        let aOtherCriteriaItems = @oOtherCriteria.fMeetCriteria(paPersons)

        for each vPerson in aOtherCriteriaItems
            if !aFirstCriteriaItems.fContains(vPerson)
                aFirstCriteriaItems.pPush(vPerson)
            end
        end

        return aFirstCriteriaItems
    end
end

def pPrintPersons(paPersons)
    for each vPerson in paPersons
        pPrintLn("Person: [Name : " & vPerson.fGetName() & ", Gender: " & vPerson.fGetGender() & ", Marital Status: " & vPerson.fGetMaritalStatus() & "]")
    end
end

def pMain
    let aPersons = []

    aPersons.pPush(new cPerson("Robert", "MALE", "SINGLE"))
    aPersons.pPush(new cPerson("John", "MALE", "MARRIED"))
    aPersons.pPush(new cPerson("Laura", "FEMALE", "MARRIED"))
    aPersons.pPush(new cPerson("Diana", "FEMALE", "SINGLE"))
    aPersons.pPush(new cPerson("Mike", "MALE", "SINGLE"))
    aPersons.pPush(new cPerson("Bobby", "MALE", "SINGLE"))

    let oMale = new cCriteriaMale()
    let oFemale = new cCriteriaFemale()
    let oSingle = new cCriteriaSingle()
    let oSingleMale = new cAndCriteria(oSingle, oMale)
    let oSingleOrFemale = new cOrCriteria(oSingle, oFemale)

    pPrintLn("Males: ")
    pPrintPersons(oMale.fMeetCriteria(aPersons))

    pPrintLn("\nFemales: ")
    pPrintPersons(oFemale.fMeetCriteria(aPersons))

    pPrintLn("\nSingle Males: ")
    pPrintPersons(oSingleMale.fMeetCriteria(aPersons))

    pPrintLn("\nSingle Or Females: ")
    pPrintPersons(oSingleOrFemale.fMeetCriteria(aPersons))
end

pMain()

"""
Output

Person : [ Name : Robert, Gender : Male, Marital Status : Single ]
Person : [ Name : John, Gender : Male, Marital Status : Married ]
Person : [ Name : Mike, Gender : Male, Marital Status : Single ]
Person : [ Name : Bobby, Gender : Male, Marital Status : Single ]

Females: 
Person : [ Name : Laura, Gender : Female, Marital Status : Married ]
Person : [ Name : Diana, Gender : Female, Marital Status : Single ]

Single Males: 
Person : [ Name : Robert, Gender : Male, Marital Status : Single ]
Person : [ Name : Mike, Gender : Male, Marital Status : Single ]
Person : [ Name : Bobby, Gender : Male, Marital Status : Single ]

Single Or Females: 
Person : [ Name : Robert, Gender : Male, Marital Status : Single ]
Person : [ Name : Diana, Gender : Female, Marital Status : Single ]
Person : [ Name : Mike, Gender : Male, Marital Status : Single ]
Person : [ Name : Bobby, Gender : Male, Marital Status : Single ]
Person : [ Name : Laura, Gender : Female, Marital Status : Married ]

"""
