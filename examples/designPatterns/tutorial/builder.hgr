"""
    Original code: https://www.tutorialspoint.com/design_pattern/index.htm
    Design patterns represent the best practices used by experienced object-oriented software 
    developers. Design patterns are solutions to general problems that software developers
    faced during software development. These solutions were obtained by trial and error by 
    numerous software developers over quite a substantial period of time.

    Pattern: Builder
    Description:
        Builder pattern builds a complex object using simple objects and using a step by step
        approach. This type of design pattern comes under creational pattern as this pattern 
        provides one of the best ways to create an object.

        A Builder class builds the final object step by step. This builder is independent of 
        other objects. 
    
    Hungaro code writer: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
    Date: 2023-02-28
"""

def cItem
    -fName()
    -fPacking()    
    -fPrice()    
end

def cPacking
    -fPack()    
end

def cWrapper as cPacking
    fPack
        return "Wrapper"
    end
end

def cBottle as cPacking
    fPack
        return "Bottle"
    end
end

def cBurger as cItem
    fPacking
        return new cWrapper()
    end

    -fPrice()
end

def cColdDrink as cItem
    fPacking
        return new cBottle()
    end

    -fPrice()
end

def cVegBurger as cBurger
    fName
        return "Veg Burger"
    end

    fPrice
        return 25.0
    end
end

def cChickenBurger as cBurger
    fName
        return "Chicken Burger"
    end

    fPrice
        return 50.5
    end
end

def cCoke as cColdDrink
    fName
        return "Coke"
    end

    fPrice
        return 30.0
    end
end

def cPepsi as cColdDrink
    fName
        return "Pepsi"
    end

    fPrice
        return 35.0
    end
end

def cMeal
    aItems = []

    pAddItem(poItem)
        @aItems.push(poItem)
    end

    fGetCost
        let nCost = 0.0
        for each vItem in @aItems
            nCost += vItem.fPrice()
        end
        return nCost
    end

    pShowItems
        for each vItem in @aItems
            print("Item: " & vItem.fName())
            print(", Packing: " & vItem.fPacking().fPack())
            print(", Price: " & vItem.fPrice())
        end
    end
end

def cMealBuilder
    fPrepareVegMeal
        let oMeal = new cMeal()
        oMeal.pAddItem(new cVegBurger())
        oMeal.pAddItem(new cCoke())
        return oMeal
    end

    fPrepareNonVegMeal
        let oMeal = new cMeal()
        oMeal.pAddItem(new cChickenBurger())
        oMeal.pAddItem(new cPepsi())
        return oMeal
    end
end

def pMain
    let oMealBuilder = new cMealBuilder()

    let oVegMeal = oMealBuilder.fPrepareVegMeal()
    println("Veg Meal")
    oVegMeal.pShowItems()
    println("Total Cost: " & oVegMeal.fGetCost())

    let oNonVegMeal = oMealBuilder.fPrepareNonVegMeal()
    println("\n\nNon-Veg Meal")
    oNonVegMeal.pShowItems()
    println("Total Cost: " & oNonVegMeal.fGetCost())
end

pMain()

# Output
# Veg Meal
# Item: Veg Burger, Packing: Wrapper, Price: 25
# Item: Coke, Packing: Bottle, Price: 30
# Total Cost: 55
#
# Non-Veg Meal
# Item: Chicken Burger, Packing: Wrapper, Price: 50.5
# Item: Pepsi, Packing: Bottle, Price: 35
# Total Cost: 85.5
