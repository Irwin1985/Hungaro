"""
    Original code: https://www.tutorialspoint.com/design_pattern/index.htm
    Design patterns represent the best practices used by experienced object-oriented software 
    developers. Design patterns are solutions to general problems that software developers
    faced during software development. These solutions were obtained by trial and error by 
    numerous software developers over quite a substantial period of time.

    Pattern: Abstract Factory
    Description:
        Abstract Factory patterns work around a super-factory which creates other factories. 
        This factory is also called as factory of factories. This type of design pattern comes under 
        creational pattern as this pattern provides one of the best ways to create an object.

        In Abstract Factory pattern an interface is responsible for creating a factory of related 
        objects without explicitly specifying their classes. Each generated factory can give the 
        objects as per the Factory pattern. 
           
    Hungaro code writer: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
    Date: 2023-02-28
"""

def cShape
    -pDraw()
end

def cRoundedRectangle as cShape
    pDraw
        pPrintLn("Inside RoundedRectangle::draw() method.")
    end
end

def cRoundedSquare as cShape
    pDraw
        pPrintLn("Inside RoundedSquare::draw() method.")
    end
end

def cRectangle as cShape
    pDraw
        pPrintLn("Inside Rectangle::draw() method.")
    end
end

def cSquare as cShape
    pDraw
        pPrintLn("Inside Square::draw() method.")
    end
end

def cAbstractFactory
    -fGetShape(psShapeType)    
end

def cShapeFactory as cAbstractFactory
    fGetShape(psShapeType)
        if psShapeType == "RECTANGLE"
            return new cRectangle()
        end

        if psShapeType == "SQUARE"
            return new cSquare()
        end

        return null
    end
end

def cRoundedShapeFactory as cAbstractFactory
    fGetShape(psShapeType)
        if psShapeType == "RECTANGLE"
            return new cRoundedRectangle()
        end

        if psShapeType == "SQUARE"
            return new cRoundedSquare()
        end

        return null
    end
end

def cFactoryProducer
    fGetFactory(pbRounded)
        if pbRounded
            return new cRoundedShapeFactory()
        end

        return new cShapeFactory()
    end
end

def pMain
    # create an instance of cFactoryProducer
    let oFactoryProducer = new cFactoryProducer()
    
    # get shape factory
    let oShapeFactory = oFactoryProducer.fGetFactory(false)

    # get an object of Shape Rectangle
    let oShape1 = oShapeFactory.fGetShape("RECTANGLE")

    # call draw method of Shape Rectangle
    oShape1.pDraw()

    # get an object of Shape Square
    let oShape2 = oShapeFactory.fGetShape("SQUARE")

    # call draw method of Shape Square
    oShape2.pDraw()

    # get shape factory
    let oRoundedShapeFactory = oFactoryProducer.fGetFactory(true)

    # get an object of Shape Rectangle
    let oShape3 = oRoundedShapeFactory.fGetShape("RECTANGLE")

    # call draw method of Shape Rectangle
    oShape3.pDraw()

    # get an object of Shape Square
    let oShape4 = oRoundedShapeFactory.fGetShape("SQUARE")

    # call draw method of Shape Square
    oShape4.pDraw()

end

pMain()

# Output
# Inside Rectangle::draw() method.
# Inside Square::draw() method.
# Inside RoundedRectangle::draw() method.
# Inside RoundedSquare::draw() method.
