"""
    Original code: https://www.tutorialspoint.com/design_pattern/index.htm
    Design patterns represent the best practices used by experienced object-oriented software 
    developers. Design patterns are solutions to general problems that software developers
    faced during software development. These solutions were obtained by trial and error by 
    numerous software developers over quite a substantial period of time.

    Pattern: Command
    Description:
        Command pattern is a data driven design pattern and falls under behavioral 
        pattern category. A request is wrapped under an object as command and passed to 
        invoker object. Invoker object looks for the appropriate object which can handle 
        this command and passes the command to the corresponding object which executes 
        the command.
        

    Hungaro code writer: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
    Date: 2023-02-28
"""

# cOrder class (acts as an interface)
def cOder
    -pExecute()
end

# cStock class: a request class
def cStock
    sName = "ABC"
    nQuantity = 10

    pBuy
        pPrintLn("Stock [Name: " & @sName & ", Quantity: " & @nQuantity & "] bought")
    end

    pSell
        pPrintLn("Stock [Name: " & @sName & ", Quantity: " & @nQuantity & "] sold")
    end
end

# cBuyStock class: a concrete command class
def cBuyStock as cOder
    oAbcStock = null

    pInit(poAbcStock)
        @oAbcStock = poAbcStock
    end

    pExecute
        @oAbcStock.pBuy()
    end
end

# cSellStock class: a concrete command class
def cSellStock as cOder
    oAbcStock = null

    pInit(poAbcStock)
        @oAbcStock = poAbcStock
    end

    pExecute
        @oAbcStock.pSell()
    end
end

# cBroker class: a invoker class
def cBroker
    aOrderList = []

    pTakeOrder(poOrder)
        @aOrderList.pPush(poOrder)
    end

    pPlaceOrders
        for each vOrder in @aOrderList
            vOrder.pExecute()
        end
        @aOrderList.pClear()
    end
end

# pMain procedure
def pMain
    let oAbcStock = new cStock()
    let oBuyStockOrder = new cBuyStock(oAbcStock)
    let oSellStockOrder = new cSellStock(oAbcStock)

    let oBroker = new cBroker()
    oBroker.pTakeOrder(oBuyStockOrder)
    oBroker.pTakeOrder(oSellStockOrder)

    oBroker.pPlaceOrders()
end

pMain()

# final assert to automatically check if all tests passed
pAssert(true, "This test should always pass")