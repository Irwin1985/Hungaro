"""
    Original code: https://www.tutorialspoint.com/design_pattern/index.htm
    Design patterns represent the best practices used by experienced object-oriented software 
    developers. Design patterns are solutions to general problems that software developers
    faced during software development. These solutions were obtained by trial and error by 
    numerous software developers over quite a substantial period of time.

    Pattern: Visitor
    Description:
        In Visitor pattern, we use a visitor class which changes the executing algorithm of an element 
        class. By this way, execution algorithm of element can vary as and when visitor varies. 
        This pattern comes under behavior pattern category. As per the pattern, element object has 
        to accept the visitor object so that visitor object handles the operation on the element object.

    Hungaro code writer: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
    Date: 2023-02-28
"""

def cComputerPart
    -pAccept(poComputerPartVisitor)
end

def cKeyboard as cComputerPart
    pAccept(poComputerPartVisitor)
        poComputerPartVisitor.pVisit(poThis)
    end
end

def cMonitor as cComputerPart
    pAccept(poComputerPartVisitor)
        poComputerPartVisitor.pVisit(poThis)
    end
end

def cMouse as cComputerPart
    pAccept(poComputerPartVisitor)
        poComputerPartVisitor.pVisit(poThis)
    end
end

def cComputer as cComputerPart
    aParts = [new cMouse(), new cKeyboard(), new cMonitor()]

    
    pAccept(poComputerPartVisitor)
        for each vPart in poThis.aParts
            vPart.pAccept(poComputerPartVisitor)
        end
        poComputerPartVisitor.pVisit(poThis)
    end
end

def cComputerPartVisitor
    -pVisit(poComputerPart)    
end

def cComputerPartDisplayVisitor as cComputerPartVisitor
    pVisit(poComputerPart)
        if poComputerPart.instanceOf("cMouse")
            println("Displaying Mouse.")
        end
        if poComputerPart.instanceOf("cKeyboard")
            println("Displaying Keyboard.")
        end
        if poComputerPart.instanceOf("cMonitor")
            println("Displaying Monitor.")
        end
        if poComputerPart.instanceOf("cComputer")
            println("Displaying Computer.")
        end
    end
end

def pMain
    let oComputer = new cComputer()
    oComputer.pAccept(new cComputerPartDisplayVisitor())
end

pMain()