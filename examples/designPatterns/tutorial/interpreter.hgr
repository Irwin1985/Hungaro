"""
    Original code: https://www.tutorialspoint.com/design_pattern/index.htm
    Design patterns represent the best practices used by experienced object-oriented software 
    developers. Design patterns are solutions to general problems that software developers
    faced during software development. These solutions were obtained by trial and error by 
    numerous software developers over quite a substantial period of time.

    Pattern: Interpreter
    Description:
        Interpreter pattern provides a way to evaluate language grammar or expression. 
        This type of pattern comes under behavioral pattern. This pattern involves 
        implementing an expression interface which tells to interpret a particular context. 
        This pattern is used in SQL parsing, symbol processing engine etc.
        

    Hungaro code writer: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
    Date: 2023-02-28
"""

def cExpression
    -fInterpret(psContext)    
end

def cTerminalExpression as cExpression
    sData = ""

    pInit(psData)
        poThis.sData = psData
    end

    fInterpret(psContext)
        return psContext.contains(poThis.sData)
    end
end

def cOrExpression as cExpression
    oExpr1 = null
    oExpr2 = null

    pInit(poExpr1, poExpr2)
        poThis.oExpr1 = poExpr1
        poThis.oExpr2 = poExpr2
    end

    fInterpret(psContext)
        return poThis.oExpr1.fInterpret(psContext) or poThis.oExpr2.fInterpret(psContext)
    end
end

def cAndExpression as cExpression
    oExpr1 = null
    oExpr2 = null

    pInit(poExpr1, poExpr2)
        poThis.oExpr1 = poExpr1
        poThis.oExpr2 = poExpr2
    end

    fInterpret(psContext)
        return poThis.oExpr1.fInterpret(psContext) and poThis.oExpr2.fInterpret(psContext)
    end
end

def pMain
    # Rule: Robert and John are male
    def fGetMaleExpression
        let oRobert = new cTerminalExpression("Robert")
        let oJohn = new cTerminalExpression("John")
        return new cOrExpression(oRobert, oJohn)
    end

    # Rule: Julie is a married women
    def fGetMarriedWomanExpression
        let oJulie = new cTerminalExpression("Julie")
        let oMarried = new cTerminalExpression("Married")
        return new cAndExpression(oJulie, oMarried)
    end

    let oIsMale = fGetMaleExpression()
    let oIsMarriedWoman = fGetMarriedWomanExpression()

    println("John is male? " & oIsMale.fInterpret("John"))
    println("Julie is a married women? " & oIsMarriedWoman.fInterpret("Married Julie"))
end

pMain()

# Output
# John is male? true
# Julie is a married women? true