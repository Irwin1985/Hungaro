"""
    Original code: https://www.tutorialspoint.com/design_pattern/index.htm
    Design patterns represent the best practices used by experienced object-oriented software 
    developers. Design patterns are solutions to general problems that software developers
    faced during software development. These solutions were obtained by trial and error by 
    numerous software developers over quite a substantial period of time.

    Pattern: Delegate
    Description:
        Business Delegate Pattern is used to decouple presentation tier and business tier. 
        It is basically use to reduce communication or remote lookup functionality to business 
        tier code in presentation tier code. In business tier we have following entities.

    Hungaro code writer: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
    Date: 2023-03-01
"""

def cBusinessService
    -pDoProcessing()
end

def cEJBService as cBusinessService
    pDoProcessing
        println("Processing task by invoking EJB Service")
    end
end

def cJMSService as cBusinessService
    pDoProcessing
        println("Processing task by invoking JMS Service")
    end
end

def cBusinessLookUp
    fGetBussinessService(psServiceType)
        if psServiceType == "EJB"
            return new cEJBService()
        else
            return new cJMSService()
        end
    end
end

def cBussinessDelegate
    oLookupService = new cBusinessLookUp()
    oBusinessService = null
    sServiceType = ""

    pSetServiceType(psServiceType)
        poThis.sServiceType = psServiceType
    end

    pDoTask
        poThis.oBusinessService = poThis.oLookupService.fGetBussinessService(poThis.sServiceType)
        poThis.oBusinessService.pDoProcessing()
    end
    
end

def cClient
    oBusinessService = null

    pInit(poBusinessService)
        poThis.oBusinessService = poBusinessService
    end

    pDoTask
        poThis.oBusinessService.pDoTask()
    end
end

def pMain
    let oBusinessDelegate = new cBussinessDelegate()
    oBusinessDelegate.pSetServiceType("EJB")

    let oClient = new cClient(oBusinessDelegate)
    oClient.pDoTask()

    oBusinessDelegate.pSetServiceType("JMS")
    oClient.pDoTask()
end

pMain()

# Output
# Processing task by invoking EJB Service
# Processing task by invoking JMS Service
