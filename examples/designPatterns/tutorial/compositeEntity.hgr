"""
    Original code: https://www.tutorialspoint.com/design_pattern/index.htm
    Design patterns represent the best practices used by experienced object-oriented software 
    developers. Design patterns are solutions to general problems that software developers
    faced during software development. These solutions were obtained by trial and error by 
    numerous software developers over quite a substantial period of time.

    Pattern: Composite Entity
    Description:
        Composite Entity pattern is used in EJB persistence mechanism. A Composite entity is an EJB 
        entity bean which represents a graph of objects. When a composite entity is updated, 
        internally dependent objects beans get updated automatically as being managed by EJB 
        entity bean. Following are the participants in Composite Entity Bean.

    Hungaro code writer: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
    Date: 2023-03-01
"""

def cDependentObject1
    sData = ""

    pSetData(psData)
        @sData = psData
    end

    fGetData
        return @sData
    end
end

def cDependentObject2
    sData = ""

    pSetData(psData)
        @sData = psData
    end

    fGetData
        return @sData
    end
end

def cCoarseGrainedObject
    oDependentObject1 = new cDependentObject1()
    oDependentObject2 = new cDependentObject2()

    pSetData(psData1, psData2)
        @oDependentObject1.pSetData(psData1)
        @oDependentObject2.pSetData(psData2)
    end

    fGetData
        return [@oDependentObject1.fGetData(), @oDependentObject2.fGetData()]
    end
end

def cCompositeEntity
    oCoarseGrainedObject = new cCoarseGrainedObject()

    pSetData(psData1, psData2)
        @oCoarseGrainedObject.pSetData(psData1, psData2)
    end

    fGetData
        return @oCoarseGrainedObject.fGetData()
    end
end

def cClient
    oCompositeEntity = new cCompositeEntity()

    pPrintData()
        for nI = 0 to @oCompositeEntity.fGetData().fLen() - 1
            pPrintLn("Data: " & @oCompositeEntity.fGetData()[nI])
        end
    end

    pSetData(psData1, psData2)
        @oCompositeEntity.pSetData(psData1, psData2)
    end
end

def pMain
    let oClient = new cClient()
    oClient.pSetData("Test", "Data")
    oClient.pPrintData()
    oClient.pSetData("Second Test", "Data1")
    oClient.pPrintData()
end

pMain()

# Output
# Data: Test
# Data: Data
# Data: Second Test
# Data: Data1