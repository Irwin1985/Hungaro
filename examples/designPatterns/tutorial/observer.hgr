"""
    Original code: https://www.tutorialspoint.com/design_pattern/index.htm
    Design patterns represent the best practices used by experienced object-oriented software 
    developers. Design patterns are solutions to general problems that software developers
    faced during software development. These solutions were obtained by trial and error by 
    numerous software developers over quite a substantial period of time.

    Pattern: Observer
    Description:
        Observer pattern is used when there is one-to-many relationship between objects 
        such as if one object is modified, its depenedent objects are to be notified 
        automatically. Observer pattern falls under behavioral pattern category.

    Hungaro code writer: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
    Date: 2023-02-28
"""

def cSubject
    aObservers = []
    nState = 0

    fGetState
        return @nState
    end

    pSetState(pnState)
        @nState = pnState
        pNotifyAllObservers()
    end

    pAttach(poObserver)
        @aObservers.push(poObserver)
    end

    pNotifyAllObservers
        for each vObserver in @aObservers
            vObserver.pUpdate()
        end
    end
end

def cObserver
    oSubject = null

    -pUpdate()
end

def cBinaryObserver as cObserver
    pInit(poSubject)
        @oSubject = poSubject
        @oSubject.pAttach(poThis)
    end

    pUpdate
        println("Binary String: " & @oSubject.fGetState())
    end
end

def cOctalObserver as cObserver
    pInit(poSubject)
        @oSubject = poSubject
        @oSubject.pAttach(poThis)
    end

    pUpdate
        println("Octal String: " & @oSubject.fGetState())
    end
end

def cHexaObserver as cObserver
    pInit(poSubject)
        @oSubject = poSubject
        @oSubject.pAttach(poThis)
    end

    pUpdate
        println("Hex String: " & @oSubject.fGetState())
    end
end

def pMain
    let oSubject = new cSubject()

    new cHexaObserver(oSubject)
    new cOctalObserver(oSubject)
    new cBinaryObserver(oSubject)

    println("First state change: 15")
    oSubject.pSetState(15)
    println("Second state change: 10")
    oSubject.pSetState(10)
end

pMain()

# Output
# First state change: 15
# Hex String: 15
# Octal String: 17
# Binary String: 1111
# Second state change: 10
# Hex String: 10

# Octal String: 12
# Binary String: 1010