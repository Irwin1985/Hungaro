"""
    Original code: https://www.tutorialspoint.com/design_pattern/index.htm
    Design patterns represent the best practices used by experienced object-oriented software 
    developers. Design patterns are solutions to general problems that software developers
    faced during software development. These solutions were obtained by trial and error by 
    numerous software developers over quite a substantial period of time.

    Pattern: Transfer Object
    Description:
        The Transfer Object pattern is used when we want to pass data with multiple attributes 
        in one shot from client to server. Transfer object is also known as Value Object. 
        Transfer Object is a simple POJO class having getter/setter methods and is serializable 
        so that it can be transferred over the network. It does not have any behavior. 
        Server Side business class normally fetches data from the database and fills the POJO 
        and send it to the client or pass it by value. For client, transfer object is read-only. 
        Client can create its own transfer object and pass it to server to update values in 
        database in one shot. Following are the entities of this type of design pattern.

    Hungaro code writer: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
    Date: 2023-03-01
"""

def cStudentVO
    sName = ""
    nRollNo = 0
    
    pInit(psName, pnRollNo)
        @sName = psName
        @nRollNo = pnRollNo
    end

    fGetName
        return @sName
    end

    pSetName(psName)
        @sName = psName
    end

    fGetRollNo
        return @nRollNo
    end

    pSetRollNo(pnRollNo)
        @nRollNo = pnRollNo
    end
end

def cStudentBO
    aStudents = []

    pInit
        @aStudents.push(new cStudentVO("Robert", 0))
        @aStudents.push(new cStudentVO("John", 1))
    end

    pDeleteStudent(poStudent)
        @aStudents.remove(poStudent)
        println("Student: Roll No " & poStudent.fGetRollNo() & ", deleted from database")
    end

    fGetAllStudents
        return @aStudents.clone() # we dont want to return the original array
    end

    pUpdateStudent(poStudent)
        @aStudents[poStudent.fGetRollNo()].pSetName(poStudent.fGetName())
        println("Student: Roll No " & poStudent.fGetRollNo() & ", updated in the database")
    end
end

def pMain
    let oStudentBusinessObject = new cStudentBO()

    for each vStudent in oStudentBusinessObject.fGetAllStudents()
        println("Student: [RollNo : " & vStudent.fGetRollNo() & ", Name : " & vStudent.fGetName() & "]")
    end

    # update student
    let oStudent = oStudentBusinessObject.fGetAllStudents()[0]
    oStudent.pSetName("Michael")
    oStudentBusinessObject.pUpdateStudent(oStudent)

    # get the student
    oStudent = oStudentBusinessObject.fGetAllStudents()[0]
    println("Student: [RollNo : " & oStudent.fGetRollNo() & ", Name : " & oStudent.fGetName() & "]")
end

pMain()

# Output
# Student: [RollNo : 0, Name : Robert]
# Student: [RollNo : 1, Name : John]
# Student: Roll No 0, updated in the database
# Student: [RollNo : 0, Name : Michael]
