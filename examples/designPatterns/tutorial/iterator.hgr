"""
    Original code: https://www.tutorialspoint.com/design_pattern/index.htm
    Design patterns represent the best practices used by experienced object-oriented software 
    developers. Design patterns are solutions to general problems that software developers
    faced during software development. These solutions were obtained by trial and error by 
    numerous software developers over quite a substantial period of time.

    Pattern: Iterator
    Description:
        Iterator pattern is very commonly used design pattern in Java and .Net programming 
        environment. This pattern is used to get a way to access the elements of a collection 
        object in sequential manner without any need to know its underlying representation.

        Iterator pattern falls under behavioral pattern category.
        

    Hungaro code writer: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
    Date: 2023-02-28
"""

def cIterator
    -fHasNext()
    -fNext()
end

def cContainer
    -fGetIterator()
end

def cNameIterator as cIterator
    nIndex = 0
    aNames = []
    
    pInit(paNames)
        poThis.aNames = paNames
    end

    fHasNext
        return poThis.nIndex < poThis.aNames.len()
    end

    fNext
        if fHasNext()
            poThis.nIndex += 1
            return poThis.aNames[poThis.nIndex - 1]
        end
        return null
    end
end

def cNameRepository as cContainer
    aNames = ["Robert", "John", "Julie", "Lora"]
    
    fGetIterator
        return new cNameIterator(poThis.aNames)
    end
end

def pMain
    let oNamesRepository = new cNameRepository()

    let oIter = oNamesRepository.fGetIterator()
    while oIter.fHasNext()
        println("Name: " & oIter.fNext())
    end
end

pMain()

# Output
# Name: Robert
# Name: John
# Name: Julie
# Name: Lora
