"""
    Original code: https://www.tutorialspoint.com/design_pattern/index.htm
    Design patterns represent the best practices used by experienced object-oriented software 
    developers. Design patterns are solutions to general problems that software developers
    faced during software development. These solutions were obtained by trial and error by 
    numerous software developers over quite a substantial period of time.

    Pattern: Intercepting Filter
    Description:
        The intercepting filter design pattern is used when we want to do some 
        pre-processing / post-processing with request or response of the application. 
        Filters are defined and applied on the request before passing the request to actual 
        target application. Filters can do the authentication/ authorization/ logging or tracking 
        of request and then pass the requests to corresponding handlers. Following are the 
        entities of this type of design pattern.

    Hungaro code writer: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
    Date: 2023-03-01
"""

def cFilter
    -pExecute(psRequest)    
end

def cAuthenticationFilter as cFilter
    pExecute(psRequest)
        println("Authenticating request: " & psRequest)
    end
end

def cDebugFilter as cFilter
    pExecute(psRequest)
        println("request log: " & psRequest)
    end
end

def cTarget
    pExecute(psRequest)
        println("Executing request: " & psRequest)
    end
end

def cFilterChain
    aFilters = []
    oTarget = null

    pAddFilter(poFilter)
        @aFilters.push(poFilter)
    end

    pExecute(psRequest)
        for each vFilter in @aFilters
            vFilter.pExecute(psRequest)
        end        
        @oTarget.pExecute(psRequest)
    end

    pSetTarget(poTarget)
        @oTarget = poTarget
    end
end

def cFilterManager
    oFilterChain = null

    pInit(poTarget)
        @oFilterChain = new cFilterChain()
        @oFilterChain.pSetTarget(poTarget)
    end

    pSetFilter(poFilter)
        @oFilterChain.pAddFilter(poFilter)
    end

    pFilterRequest(psRequest)
        @oFilterChain.pExecute(psRequest)
    end
end

def cClient
    oFilterManager = null

    pSetFilterManager(poFilterManager)
        @oFilterManager = poFilterManager
    end

    pSendRequest(psRequest)
        @oFilterManager.pFilterRequest(psRequest)
    end
end

def pMain
    let oFilterManager = new cFilterManager(new cTarget())
    oFilterManager.pSetFilter(new cAuthenticationFilter())
    oFilterManager.pSetFilter(new cDebugFilter())

    let oClient = new cClient()
    oClient.pSetFilterManager(oFilterManager)
    oClient.pSendRequest("HOME")
end

pMain()

# Output
# Authenticating request: HOME
# request log: HOME
# Executing request: HOME
