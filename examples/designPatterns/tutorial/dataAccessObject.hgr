"""
    Original code: https://www.tutorialspoint.com/design_pattern/index.htm
    Design patterns represent the best practices used by experienced object-oriented software 
    developers. Design patterns are solutions to general problems that software developers
    faced during software development. These solutions were obtained by trial and error by 
    numerous software developers over quite a substantial period of time.

    Pattern: Data Access Object (DAO)
    Description:
        Data Access Object Pattern or DAO pattern is used to separate low level data accessing 
        API or operations from high level business services. Following are the participants in 
        Data Access Object Pattern

    Hungaro code writer: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
    Date: 2023-03-01
"""

def cStudent
    sName = ""
    nRollNo = 0

    pInit(psName, pnRollNo)
        @sName = psName
        @nRollNo = pnRollNo
    end

    fGetName
        return @sName
    end

    pSetName(psName)
        @sName = psName
    end

    fGetRollNo
        return @nRollNo
    end

    pSetRollNo(pnRollNo)
        @nRollNo = pnRollNo
    end
end

def cStudentDao
    aStudents = []    

    -fGetAllStudents()
    -fGetStudent()
    -pUpdateStudent(poStudent)
    -pDeleteStudent(poStudent)
end

def cStudentDaoImpl
    # List is working as a database
    aStudents = [new cStudent("Robert", 0), new cStudent("John", 1)]

    fGetAllStudents
        return @aStudents.fClone() # we dont want to return the reference of the original list
    end

    fGetStudent(pnRollNo)
        return @aStudents[pnRollNo]
    end

    pUpdateStudent(poStudent)
        @aStudents[poStudent.fGetRollNo()].pSetName(poStudent.fGetName())
        pPrintLn("Student: Roll No " & poStudent.fGetRollNo() & ", updated in the database")
    end

    pDeleteStudent(poStudent)
        @aStudents.fRemove(poStudent.fGetRollNo())
        pPrintLn("Student: Roll No " & poStudent.fGetRollNo() & ", deleted from database")
    end
end

def pMain
    let oStudentDao = new cStudentDaoImpl()

    # Print all students
    for each vStudent in oStudentDao.fGetAllStudents()
        pPrintLn("Student: [RollNo : " & vStudent.fGetRollNo() & ", Name : " & vStudent.fGetName() & "]")
    end

    # Update student
    let oStudent = oStudentDao.fGetAllStudents().fGet(0)
    oStudent.pSetName("Michael")
    oStudentDao.pUpdateStudent(oStudent)

    # Get the student
    oStudentDao.fGetStudent(0)
    pPrintLn("Student: [RollNo : " & oStudent.fGetRollNo() & ", Name : " & oStudent.fGetName() & "]")
end

pMain()

# Output
# Student: [RollNo : 0, Name : Robert]
# Student: [RollNo : 1, Name : John]
# Student: Roll No 0, updated in the database
# Student: [RollNo : 0, Name : Michael]
