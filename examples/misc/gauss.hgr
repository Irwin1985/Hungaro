"""
 Gaussian Elimination
 NOTE: this example is not tested yet

 Author: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
 Date: 2023-02-23
"""

def pSwapRow(paA, paB, pnRow1, pnRow2, pnCol)
    if pnRow1 != pnRow2
        let aTemp = []
        for nI = 0 to pnCol - 1
            let aP1 = paA[pnRow1][nI]
            let aP2 = paA[pnRow2][nI]
            laTemp = aP1
            aP1 = aP2
            aP2 = aTemp
        end

        for nJ = pnRow1 to pnCol-1
            let aTemp = pnA[pnRow1][nJ]
            pnA[pnRow1][nJ] = pnA[pnRow2][nJ]
            pnA[pnRow2][nJ] = aTemp
        end

        aTemp = paB[pnRow1]
        paB[pnRow1] = paB[pnRow2]
        paB[pnRow2] = aTemp
    end
end

# procedure gauss eliminate
def pGaussEliminate(paA, paB, paX, pnN)
    for nK = 0 to pnN-1
        let nMax = fAbs(paA[nK][nK])
        let nMaxRow = nK

        for nRow = nK+1 to pnN-1
            let nTemp = fAbs(paA[nRow][nK])
            if nTemp > nMax
                nMaxRow = nRow
                nMax = nTemp
            end
        end

        lpSwapRow(paA, paB, nK, nMaxRow, pnN)

        for nRow = nK+1 to pnN-1
            let nTemp = paA[nRow][nK] / paA[nK][nK]
            for nCol = nK+1 to pnN-1
                paA[nRow][nCol] = paA[nRow][nCol] - nTemp * paA[nK][nCol]
            end
            paA[nRow][nK] = 0
            paB[nRow] = paB[nRow] - nTemp * paB[nK]
        end
    end

    pPrintLn("Back substitution")
    for nRow = pnN-1 to 0 step -1
        let nTemp = paB[nRow]
        for nJ = pnN-1 to nRow step -1
            nTemp = nTemp - paA[nRow][nJ] * paX[nJ]        
        end
        paX[nRow] = nTemp / paA[nRow][nRow]
    end
end

# Solve A x = b
def pGauss(paA, paB, paX)
    let nRowX = 0 # Keep count of the row interchanges
    let nN = paA.len()-1 # Ignore first row

    for nK = 1 to nN-1
        let nMax = fAbs(paA[nK][nK])
        let nMaxRow = nK
        # Find the row with the largest pivot
        for nI = nK+1 to nN
            let nXfac = fAbs(paA[nI][nK])
            if nXfac > nMax
                nMax = nXfac
                nMaxRow = nI
            end
        end

        if nMaxRow != nK
            # row interchanges
            nRowX += 1
            let nTemp1 = paB[nK]
            paB[nK] = paB[nMaxRow]
            paB[nMaxRow] = nTemp1
            for nJ = nK to nN
                let nTemp = paA[nK][nJ]
                paA[nK][nJ] = paA[nMaxRow][nJ]
                paA[nMaxRow][nJ] = nTemp
            end
        end

        for nI = nK+1 to nN
            let nXfac = paA[nI][nK] / paA[nK][nK]            
            for nJ = nK+1 to nN
                paA[nI][nJ] = paA[nI][nJ] - nXfac * paA[nK][nJ]
            end
            paB[nI] = paB[nI] - nXfac * paB[nK]    
        end
    end

    # Back substitution
    for nJ = 1 to nN
        let nK = nN - nJ + 1
        paX[nK] = paB[nK]
        for nI = nK+1 to nN
            paX[nK] = paX[nK] - paA[nK][nI] * paX[nI]
        end
        paX[nK] = paX[nK] / paA[nK][nK]
    end
end

# Create the 'A' matrix
let aA = [
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
]

# Create the 'b' matrix
let aB = [0, 0, 0, 0]
let aX = [0, 0, 0, 0]

# Fill the 'A' matrix
aA[0][0] = 2
aA[0][1] = 1
aA[0][2] = 0
aA[0][3] = 0

aA[1][0] = 1
aA[1][1] = 1
aA[1][2] = 1
aA[1][3] = 0

aA[2][0] = 0
aA[2][1] = 1
aA[2][2] = 2
aA[2][3] = 1

aA[3][0] = 0
aA[3][1] = 0
aA[3][2] = 1
aA[3][3] = 2

pPrintLn("A = ", aA)

# Fill the 'b' matrix
aB[0] = 2
aB[1] = 1
aB[2] = 4
aB[3] = 8

pGauss(aA, aB, aX)

pPrintLn(aX[0], ", ", aX[1], ", ", aX[2], ", ", aX[3])

pPrintLn("Second method")

# Create the 'A' matrix
aA = [
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
]

# Create the 'b' matrix
aB = [0, 0, 0, 0]
aX = [0, 0, 0, 0]

# Fill the 'A' matrix
aA[0][0] = 2
aA[0][1] = 1
aA[0][2] = 0
aA[0][3] = 0

aA[1][0] = 1
aA[1][1] = 1
aA[1][2] = 1
aA[1][3] = 0

aA[2][0] = 0
aA[2][1] = 1
aA[2][2] = 2
aA[2][3] = 1

aA[3][0] = 0
aA[3][1] = 0
aA[3][2] = 1
aA[3][3] = 2

pPrintLn("A = ", aA)

# Fill the 'b' matrix
aB[0] = 2
aB[1] = 1
aB[2] = 4
aB[3] = 8

pGaussEliminate(aA, aB, aX)

pPrintLn("Output results: ")

pPrintLn(aX[0], ", ", aX[1], ", ", aX[2], ", ", aX[3])