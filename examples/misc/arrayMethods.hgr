"""
 Test array methods

 Author: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
 Date: 2023-02-24
"""

let aArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

pAssert(aArray.fLen() == 10, "Array length is not 10")

aArray.pPush([-1, -2])

pAssert(aArray.toString() == "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, [-1, -2]]", "Array is not equal")

# Math functions

let aNumbers = [1, 2, 3, 4, 5, 6]
pAssert(aNumbers.fSum() == 21, "Sum is not 21")
pAssert(aNumbers.fAvg() == 3.5, "Average is not 3.5")
pAssert(aNumbers.fMin() == 1, "Min is not 1")
pAssert(aNumbers.fMax() == 6, "Max is not 6")

# Array functions
let aArray1 = [1, 2, 3, 4, 5, 6]
let aArray2 = [7, 8, 9, 10, 11, 12]

# fConcat()
pAssert(aArray1.fConcat(aArray2).toString() == "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Concat is not equal")

# toString()
pAssert(aArray1.toString() == "[1, 2, 3, 4, 5, 6]", "Array is not equal")

# fIndexOf()
pAssert(aArray1.fIndexOf(3) == 2, "Index of 3 is not 2")

# fLastIndexOf()
pAssert([1, 2, 13, 14, 2, 15, 2].fLastIndexOf(2) == 6, "Last index of 2 is not 6")

# fContains()
pAssert(aArray1.fContains(3) == true, "Array does not contain 3")

# fIsEmpty()
pAssert(aArray1.fIsEmpty() == false, "Array is empty")

# pSort(): this method alter the array
aArray1.pSort()
pAssert(aArray1.toString() == "[1, 2, 3, 4, 5, 6]", "Array is not equal")

# revers(): this method alter the array
aArray1.pReverse()
pAssert(aArray1.toString() == "[6, 5, 4, 3, 2, 1]", "Array is not equal")

# fFirst()
pAssert(aArray1.fFirst() == 6, "First element is not 6")

# fLast()
pAssert(aArray1.fLast() == 1, "Last element is not 1")

# fRemove(): removes the first element that matches the value
aArray1.fRemove(3)
pAssert(aArray1.toString() == "[6, 5, 4, 2, 1]", "Array is not equal")

# fRemoveAt(): removes the element at the specified index
aArray1.fRemoveAt(2)
pAssert(aArray1.toString() == "[6, 5, 2, 1]", "Array is not equal")

# fInsertAt(): inserts the element at the specified index
aArray1.fInsertAt(2, 4)
pAssert(aArray1.toString() == "[6, 5, 4, 2, 1]", "Array is not equal")

# fOccurs(): returns the number of times the value occurs in the array
pAssert(["Robert", "Bob", "Martin", "Robert"].fOccurs("Robert") == 2, "Robert occurs 2 times")

# take(n>0): returns a new array with the specified number of elements
pAssert(aArray1.take(2).toString() == "[6, 5]", "Array is not equal")

# take(n<0): returns a new array with the specified number of elements from the end
pAssert(aArray1.take(-2).toString() == "[2, 1]", "Array is not equal")

# pPush()
aArray1.pPush(7)
pAssert(aArray1.toString() == "[6, 5, 4, 2, 1, 7]", "Array is not equal")

# fPop()
pAssert(aArray1.fPop() == 7, "Pop is not 7")

# fLen()
pAssert(aArray1.fLen() == 5, "Array length is not 5")

# fGet()
pAssert(aArray1.fGet(2) == 4, "Element at index 2 is not 4")

# pSet()
aArray1.pSet(2, 3)
pAssert(aArray1.toString() == "[6, 5, 3, 2, 1]", "Array is not equal")

# fSlice()
pAssert(aArray1.fSlice(1, 3).toString() == "[5, 3]", "Slice is not equal")

# fJoin()
pAssert(aArray1.fJoin(",") == "6,5,3,2,1", "Join is not equal")

# pShuffle()
aArray1.pShuffle()
pAssert(aArray1.toString() != "[6, 5, 3, 2, 1]", "Array is equal")

# fEquals()
pAssert([1, 2, 3].fEquals([1, 2, 3]) == true, "Arrays are not equal")

# fClone()
let aOriginal = [1, 2, 3]
let aArray3 = aOriginal.fClone()
pAssert(aArray3.fEquals(aOriginal) == true, "Arrays are not equal")

# pClear()
aArray3.pClear()
pAssert(aArray3.fLen() == 0, "Array length is not 0")