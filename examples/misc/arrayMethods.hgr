"""
 Test array methods

 Author: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
 Date: 2023-02-24
"""

let aArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

assert(aArray.len() == 10, "Array length is not 10")

aArray.push([-1, -2])

assert(aArray.toString() == "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, [-1, -2]]", "Array is not equal")

# Math functions

let aNumbers = [1, 2, 3, 4, 5, 6]
assert(aNumbers.sum() == 21, "Sum is not 21")
assert(aNumbers.avg() == 3.5, "Average is not 3.5")
assert(aNumbers.min() == 1, "Min is not 1")
assert(aNumbers.max() == 6, "Max is not 6")

# Array functions
let aArray1 = [1, 2, 3, 4, 5, 6]
let aArray2 = [7, 8, 9, 10, 11, 12]

# concat()
assert(aArray1.concat(aArray2).toString() == "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Concat is not equal")

# toString()
assert(aArray1.toString() == "[1, 2, 3, 4, 5, 6]", "Array is not equal")

# indexOf()
assert(aArray1.indexOf(3) == 2, "Index of 3 is not 2")

# lastIndexOf()
assert([1, 2, 13, 14, 2, 15, 2].lastIndexOf(2) == 6, "Last index of 2 is not 6")

# contains()
assert(aArray1.contains(3) == true, "Array does not contain 3")

# isEmpty()
assert(aArray1.isEmpty() == false, "Array is empty")

# sort(): this method alter the array
aArray1.sort()
assert(aArray1.toString() == "[1, 2, 3, 4, 5, 6]", "Array is not equal")

# revers(): this method alter the array
aArray1.reverse()
assert(aArray1.toString() == "[6, 5, 4, 3, 2, 1]", "Array is not equal")

# first()
assert(aArray1.first() == 6, "First element is not 6")

# last()
assert(aArray1.last() == 1, "Last element is not 1")

# remove(): removes the first element that matches the value
aArray1.remove(3)
assert(aArray1.toString() == "[6, 5, 4, 2, 1]", "Array is not equal")

# removeAt(): removes the element at the specified index
aArray1.removeAt(2)
assert(aArray1.toString() == "[6, 5, 2, 1]", "Array is not equal")

# insertAt(): inserts the element at the specified index
aArray1.insertAt(2, 4)
assert(aArray1.toString() == "[6, 5, 4, 2, 1]", "Array is not equal")

# occurs(): returns the number of times the value occurs in the array
assert(["Robert", "Bob", "Martin", "Robert"].occurs("Robert") == 2, "Robert occurs 2 times")

# take(n>0): returns a new array with the specified number of elements
assert(aArray1.take(2).toString() == "[6, 5]", "Array is not equal")

# take(n<0): returns a new array with the specified number of elements from the end
assert(aArray1.take(-2).toString() == "[2, 1]", "Array is not equal")

# push()
aArray1.push(7)
assert(aArray1.toString() == "[6, 5, 4, 2, 1, 7]", "Array is not equal")

# pop()
assert(aArray1.pop() == 7, "Pop is not 7")

# len()
assert(aArray1.len() == 5, "Array length is not 5")

# get()
assert(aArray1.get(2) == 4, "Element at index 2 is not 4")

# set()
aArray1.set(2, 3)
assert(aArray1.toString() == "[6, 5, 3, 2, 1]", "Array is not equal")

# slice()
assert(aArray1.slice(1, 3).toString() == "[5, 3]", "Slice is not equal")

# join()
assert(aArray1.join(",") == "6,5,3,2,1", "Join is not equal")

# shuffle()
aArray1.shuffle()
assert(aArray1.toString() != "[6, 5, 3, 2, 1]", "Array is equal")

# equals()
assert([1, 2, 3].equals([1, 2, 3]) == true, "Arrays are not equal")

# clone()
let aOriginal = [1, 2, 3]
let aArray3 = aOriginal.clone()
assert(aArray3.equals(aOriginal) == true, "Arrays are not equal")

# clear()
aArray3.clear()
assert(aArray3.len() == 0, "Array length is not 0")