"""
 Quick sort algorithm, depends on recursion

 Author: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
 Date: 2023-02-24
"""

def pQuickSort(paNumbers, pnLeft, pnRight)
    let nLeftPtr = pnLeft, nRightPtr = pnRight, nPivot = paNumbers[pnLeft]
    while pnLeft < pnRight
        while paNumbers[pnRight] >= nPivot and pnLeft < pnRight
            pnRight -= 1
        end

        if pnLeft != pnRight
            paNumbers[pnLeft] = paNumbers[pnRight]
            pnLeft += 1
        end

        while paNumbers[pnLeft] <= nPivot and pnLeft < pnRight
            pnLeft += 1
        end

        if pnLeft != pnRight
            paNumbers[pnRight] = paNumbers[pnLeft]
            pnRight -= 1
        end            
    end

    paNumbers[pnLeft] = nPivot
    nPivot = pnLeft
    pnLeft = nLeftPtr
    pnRight = nRightPtr

    if pnLeft < nPivot
        pQuickSort(paNumbers, pnLeft, nPivot - 1)
    end

    if pnRight > nPivot
        pQuickSort(paNumbers, nPivot + 1, pnRight)
    end
end

# Driver code to test above
let aNumbers = [12, 7, 13, 5, 6]
pQuickSort(aNumbers, 0, 4)
assert(aNumbers == [5, 6, 7, 12, 13], "Quick sort algorithm failed")

# Bigger example
let aNumbers = [] * rand(1, 100) = 0
for nIndex = 0 to aNumbers.len() - 1
    aNumbers[nIndex] = rand(1, 100)
end
pQuickSort(aNumbers, 0, aNumbers.len() - 1)
println("Larger example: " & aNumbers)