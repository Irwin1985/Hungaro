"""
    Original code: https://www.tutorialspoint.com/design_pattern/index.htm
    Design patterns represent the best practices used by experienced object-oriented software 
    developers. Design patterns are solutions to general problems that software developers
    faced during software development. These solutions were obtained by trial and error by 
    numerous software developers over quite a substantial period of time.

    Pattern: Composite
    Description:
        Composite pattern is used where we need to treat a group of objects in similar way 
        as a single object. Composite pattern composes objects in term of a tree structure 
        to represent part as well as whole hierarchy. This type of design pattern comes 
        under structural pattern as this pattern creates a tree structure of group of objects.

    Hungaro code writer: Irwin Rodr√≠guez <rodriguez.irwin@gmail.com>
    Date: 2023-02-28
"""

# Employee class
declare lcEmployee
    sName = ""
    sDept = ""
    nSalary = 0.0
    aSubordinates = []

    # Constructor
    pInit(psName, psDept, pnSalary)
        sName = psName
        sDept = psDept
        nSalary = pnSalary
    end

    pAdd(poEmployee)
        aSubordinates.push(poEmployee)
    end

    pRemove(poEmployee)
        aSubordinates.remove(poEmployee)
    end

    fGetSubordinates
        return aSubordinates.clone() # Return a copy of the array
    end

    fToString
        return "Employee :[ Name : " & sName & ", dept : " & sDept & ", salary :" & nSalary & " ]"
    end
end

declare lpMain
    declare loCEO = new lcEmployee("John", "CEO", 30000.0)
    declare loHeadSales = new lcEmployee("Robert", "Head Sales", 20000.0)
    declare loHeadMarketing = new lcEmployee("Michel", "Head Marketing", 20000.0)

    declare loClerk1 = new lcEmployee("Laura", "Marketing", 10000.0)
    declare loClerk2 = new lcEmployee("Bob", "Marketing", 10000.0)

    declare loSalesExecutive1 = new lcEmployee("Richard", "Sales", 10000.0)
    declare loSalesExecutive2 = new lcEmployee("Rob", "Sales", 10000.0)

    loCEO.pAdd(loHeadSales)
    loCEO.pAdd(loHeadMarketing)

    loHeadSales.pAdd(loSalesExecutive1)
    loHeadSales.pAdd(loSalesExecutive2)

    loHeadMarketing.pAdd(loClerk1)
    loHeadMarketing.pAdd(loClerk2)

    # Print all employees of the organization
    println(loCEO.fToString())

    for each lvHeadEmployee in loCEO.fGetSubordinates()
        println(lvHeadEmployee.fToString())

        for each lvEmployee in lvHeadEmployee.fGetSubordinates()
            println(lvEmployee.fToString())
        end
    end
end

lpMain()

# Output
# Employee :[ Name : John, dept : CEO, salary :30000 ]
# Employee :[ Name : Robert, dept : Head Sales, salary :20000 ]
# Employee :[ Name : Richard, dept : Sales, salary :10000 ]
# Employee :[ Name : Rob, dept : Sales, salary :10000 ]
# Employee :[ Name : Michel, dept : Head Marketing, salary :20000 ]
# Employee :[ Name : Laura, dept : Marketing, salary :10000 ]
# Employee :[ Name : Bob, dept : Marketing, salary :10000 ]

